package filework;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class mainClass {

	public static void main(String[] args) {

		File howtofile = new File("");
		
					createFile(howtofile);
					deleteFile(howtofile);
					fileWrite(howtofile);
					fileread(howtofile);
					filemorewrite(howtofile);
					fileallprint(howtofile);
	
}
	static void createFile(File howtofile) {
		
		// 파일 생성
		Scanner scan = new Scanner(System.in);
		System.out.println("생성하실 파일명을 입력해 주세요.");
		String fname = scan.next();
				
				howtofile = new File("e:\\tm2\\"+fname);
				
				try {
					if(howtofile.createNewFile()) {
						System.out.println(fname + " 파일 생성 성공!");
						
					}
					else {
						System.out.println(fname + " 파일 생성 실패!");
					}
				} catch (IOException e) {			
					e.printStackTrace();
				}
		
		
				
	}
	static void deleteFile(File howtofile) {
		Scanner sc = new Scanner(System.in);
		System.out.println("삭제하실 파일명을 입력해주세요.");
		String str = sc.next();
		howtofile = new File("e:\\tm2\\"+str);
		
		if(howtofile.delete()) {
			System.out.println("파일을 삭제했습니다.");
		}
		else {
			System.out.println("파일을 삭제하지 못했습니다.");
		}
	}
	static void fileWrite(File howtofile) {
		Scanner sc = new Scanner(System.in);
		System.out.println("내용입력 하실 파일명을 입력해주세요.");
		String str = sc.next();
		howtofile = new File("e:\\tm2\\"+str);
		System.out.println(str + " 파일의 입력할 문자를 입력해주세요.");
		String str2 = sc.next();
		try { // 선언후 입력시 try catch 문으로 인셉션을 잡아주지않으면 오류가 발생한다.
			FileWriter howtofileWrite = new FileWriter(howtofile); // 기존 파일Write 선언 후 Write 할 file 입력
			howtofileWrite.write(str2);
			howtofileWrite.close(); // 사용이 끝나면 닫아준다.
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	static void fileread(File howtofile) {
		Scanner sc = new Scanner(System.in);
		String read;
		System.out.println("읽으실 파일의 이름을 입력해 주세요.");
		String str = sc.next();
		howtofile = new File("e:\\tm2\\"+str);
		try {
			if(checkBeforeReadFile(howtofile)) {
			
				BufferedReader br = new BufferedReader(new FileReader(howtofile));

				while((read = br.readLine()) != null) { //비어있지 않을때 까지 읽어라
					System.out.println(read);
				}
				br.close();
			
			}
			else {
				System.out.println("파일을 읽을 수 없습니다.");
			}
	} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
}
	}
	static boolean checkBeforeReadFile(File f) { // utility 함수 프로그램에 직접적인 영향은 주지않고 검사용 함수를 유틸리티라고 한다.
		if(f.exists()) { // exists 존재여부
			if(f.isFile() && f.canRead()) { // is file == 파일인지 유무 확인 canRead 읽기 가능한지
				return true;
			}
		}
		return false;
	}

	static void filemorewrite(File howtoFile) {
		Scanner sc = new Scanner(System.in);
		System.out.println("추가로 내용을 입력할 파일의 이름을 입력해주세요.");
		String writefile = sc.next();
		howtoFile = new File("e:\\tm2\\"+writefile);
		try {
			FileWriter howtofilewriter = new FileWriter(howtoFile, true);
			System.out.println("추가로 입력할 내용을 입력해주세요.");
			String morewrite = sc.next();
			howtofilewriter.write(morewrite);
			howtofilewriter.close();
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
	}
	
	static void fileallprint(File howFile) {
		
		howFile = new File("e:\\tm2\\");
		String arry[] = howFile.list();
		
		for (int i = 0; i < arry.length; i++) {
			System.out.println(arry[i]);
		}
	}
	
}
	
