-- WHERE == IF문 

/*
    표현식
    비교연산자( =, >, <, !=, >=, <=, <>)
    NULL 사용방법 1 .IS NULL(NILL인지), 2.IS NOT NULL(NULL이 아닌것들)
    AND, OR, NOT
    
    
    사용순서
    SELECT  
    FROM    
    WHERE  조건절 
    
*/

-- FIRST_NAME = JULIA

SELECT FIRST_NAME, LAST_NAME, SALARY -- 이걸 출력해라
FROM EMPLOYEES -- 여기에서
WHERE FIRST_NAME = 'Julia';	 -- FIRST_NAME 이 Julia 라면 SELECT 절을 출력해라.

SELECT FIRST_NAME, LAST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY >= 9000;		-- 월급이 9000불 이상(포함)

-- 이름이 Shanta보다 큰 이름
SELECT first_name, last_name, salary
FROM EMPLOYEES
WHERE first_name >= 'Shanta';	-- 이름이 크다는 의미는 알파뱃 순서이다. Shanta 이후 이름들을 찾아내라

SELECT first_name, last_name, manager_id
FROM employees
WHERE manager_id = ''; 		-- 늘 언급하지만 '' 은 값이 있는거다 NULL 이랑 다르다.

SELECT first_name, last_name, manager_id
FROM employees
WHERE manager_id IS NOT NULL;	-- 상사의 존재 여부가 NULL 값이 아니라면 (대표자 말고는 전부다 있다) 


-- AND
SELECT first_name, last_name, salary
FROM employees
WHERE first_name = 'Shanta' AND first_name = 'John';  	-- first_name 이 2개일 수 는 없기에 출력값이 없다.

-- OR
SELECT first_name, last_name, salary
FROM employees
WHERE first_name = 'Shanta' OR first_name = 'John';  	-- 애는 OR 연산 또는 임으로 산타, 존이 출력된다.

-- 이름 John, 급여 <= 5000

SELECT first_name, last_name, salary
FROM employees
WHERE first_name = 'John'
AND salary > 5000;				-- first_name 이 존 이면서 월급이 5000 이상이면


-- 2007년 12월 31일 이후에 입사한 사원을 출력해라.

SELECT first_name, hire_date
FROM employees
WHERE hire_date > TO_DATE('20071231', 'YYYY/MM/DD'); -- 입사일 표현을 할때 그냥 '년도/월/일' 로 사용이 가능하다. (TO_MONTH)(?)

-- ALL(AND), ANY(OR)
SELECT first_name, last_name, salary
FROM employees
WHERE first_name = ANY('Julia', 'John', 'Steven'); 	-- any(값1, 값2, 값3...)  or 연산이다.

SELECT first_name, salary
FROM employees
WHERE salary = ANY(8000, 3200, 6000);		-- salary(월급)이 8000, 3200, 6000 인 사람들만 찾아낸다.

-- IN, NOT IN  OR, !OR 느낌??
SELECT first_name, salary
FROM employees
WHERE salary IN(8000, 3200, 600);  -- 월급이 이거인 사람들을 출력한다.	-- in(값, 값2, 값3....) in도  or 연산이다.


SELECT first_name, salary
FROM employees
WHERE salary NOT IN(8000, 3200, 600); 				-- NOT IN(값1, 값2, 값3...) 값 3개를 제외한 모든 값

SELECT first_name, last_name, salary
FROM employees
WHERE first_name NOT IN('Julia', 'John');				-- 성이 줄리아, 존이 아닐경우

                  
SELECT first_name, last_name, salary
FROM employees
WHERE first_name IN('Julia', 'John');					-- in 은 or 연산

-- EXISTS
SELECT e.first_name, e.job_id
FROM employees e
WHERE EXISTS ( SELECT 1         -- E로 매개체로 해서 E.JOB ID가 ITPROG 면 1로 출력을 하고 만약 1이 출력이되면 셀렉트 부분을 뽑아서 출력해라 이뜻이다.
                FROM DUAL       -- 이게 서브 쿼리
                WHERE e.job_id = 'IT_PROG');


-- BETWEEN 범위 연산자
/*
    SALARY >= 3200 AND SALARY <= 9000
    BETWEEN 사용시 AND 만 입력할 수 있다.
*/

SELECT first_name, salary
FROM employees
WHERE SALARY >= 3200 AND SALARY <= 9000;	-- 월급이 3200 이상이며 9000 이하인 것 들을 찾아낸다. (계속 찾아낸다 라고 말을 하는데 걍 말이 이럴뿐이지 찾아내고 끝나는건 아니다.)


SELECT first_name, salary
FROM employees
WHERE SALARY BETWEEN 3200 AND 9000;		-- 위에서 한 3200 이상 9000 이하 값을 AND 연산이 아닌 BETWEEN 함수로 처리한 것 이다. BETWEEN 함수를 사용할떄 에는 BETWEEN 값1 AND 값2 형식으로 이루지며 가운데 AND 이외 다른거는 사용을 못한다.


SELECT first_name, salary
FROM employees
WHERE SALARY NOT BETWEEN 3200 AND 9000; 	-- NOT 이 붙어있다. 3200 이상 9000 이하가 아닌 것 들을 나타낸다.

-- LIKE
SELECT first_name, last_name
FROM employees
WHERE first_name LIKE 'G_ra_d'; 	-- _(언더바)는 한문자를 표헌한다.  G_ra_d 의 의미는 언더바(한문자)에 어떤 문자가 들어오든(G?ra?d) 그 앞 뒤로 G, ra, d 일 경우 찾아낸다.


SELECT first_name, last_name
FROM employees
WHERE first_name LIKE 'K%y'; 	-- K% 앞글자가 K 일경우 %y 마지막 글자가 y 일경우 찾아낸다 만약에 K% 만 사용할경우 K로 시작하는 전부 %y 일경우 y로 끝나는 전부를 찾아낸다.

SELECT first_name
FROM employees
WHERE first_name LIKE '%A%'; 	-- 위치 상관없이 이름에 A가 있으면 찾아낸다.

SELECT first_name
FROM employees
WHERE first_name LIKE '%Al%'; 	-- 위치 상관없이 이름안에 AI 가 있을경우 찾아낸다


-- 2006년도에 입사한 사원
SELECT first_name, hire_date
FROM employees
WHERE hire_date LIKE '06/%'; 	-- 06년에 입사한 사람들을 찾아낸다. LIKE 로 입사일을 구할때에는 날짜 형식을 맞춰주어야 한다. 만약에 LIKE '06/05%'; 로 끝날경우 06년도 5월 이후로 입사한 사람들을 찾아낸다.

-- ORDER BY 절 : 정렬 
-- DB의 장점중 하나가 sorting이 빠르다. ORDER BY가 엄청 빠르다.
SELECT *
FROM emp
-- WHERE deptno = 10
--ORDER BY SAL ASC;   	 올림차순 정렬
--  ORDER BY SAL; 	ASC 를 생략해도 오름차순으로 정렬이된다.
-- ORDER BY SAL DESC;       내림차순 정렬

-- ORDER BY SAL, ENAME;
ORDER BY DEPTNO DESC, sal ASC; 		-- 정렬을 이렇게 2개를 할 수 있다. 맨 처음에는 deptno 값을 내림차순 으로 정렬을 한 뒤 deptno 값이 같을경우 같은거 끼리 sal 값을 한번더 오름차순으로 정렬한다.

-- ALIAS
SELECT empno, ENAME, SAL*12 AS annsal
FROM emp
ORDER BY annsal; 				-- annsal 이란 alias(별칭(?)) 을 정렬을 한다는 의미이다.

-- nulls first 또는 nulls last 키워드
SELECT
    *
FROM emp
ORDER BY COMM NULLS FIRST;		-- comm(보너스) 값이 null인 경우 오름차순 정렬 0순위가 null 값이 되어 맨처음에 null 이 표시된다.

SELECT
    *
FROM emp
ORDER BY MGR NULLS LAST;		-- comm(보너스) 값이 null인 경우 오름차순 정렬 마지막 순위가 null 값이 되어 제일 마지막으로 이동한다.