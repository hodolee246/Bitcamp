-- 한줄 주석문
/*
범위 주석문
*/

-- 자료형 
-- JAVA   Oracle
-- int == NUMBER
-- String == VARCHAR2
-- double == NUMBER(정수의 자리수, 소수의 자리수)
-- Date == Date


-- 문자열 자료형
-- CHAR
CREATE TABLE TB_CHAR(
    COL_CHAR1 CHAR(10 BYTE),    --  COL_String COL_CHAR1;
    COL_CHAR2 CHAR(10 CHAR),    -- CHAR : 10 BYTE
    COL_CHAR3 CHAR(10)  -- 아무것도 안적으면 바이트로 들어간다.
    
)  ; 

/*
CREATE TABLE 테이블명(
    컬럼명 컬럼의 자료형(크기),
    컬럼명 컬럼의 자로형(크기)

);
*/
INSERT INTO TB_CHAR(COL_CHAR1, COL_CHAR2, COL_CHAR3)
VALUES('ABC', 'ABC', 'ABC'); -- 영문크기 1BYTE, 

SELECT * FROM TB_CHAR;

INSERT INTO TB_CHAR(COL_CHAR1, COL_CHAR2, COL_CHAR3)
VALUES('가나', '가나', '가나'); -- 한글크기 3 BYTE

INSERT INTO TB_CHAR(COL_CHAR1, COL_CHAR2, COL_CHAR3)
VALUES('가나다', '가나다', '가나다');

SELECT col_char1, col_char2, col_char3,
    LENGTHB(col_char1), LENGTHB(col_char2), LENGTHB(col_char3)
FROM TB_CHAR;

/*
CHAR : 10BYTE 00000 00000
ABC ->        ABC00 00000

10 BYTE
가나다 -> 가나다0 (3*3 + 0)

10 CHAR
가 3 + 9 = 12;               가0000 00000
가나 3 + 3 + 8 = 14          가나000 00000
가나다 3 + 3 + 3 + 7 = 16     가나다00 00000
*/

-- VARCHAR2 (문자열)
CREATE TABLE TB_VARCHAR(
    컬럼1 VARCHAR2(10 BYTE),
    컬럼2 VARCHAR2(10 CHAR),
    컬럼3 VARCHAR2(10)
);

INSERT INTO tb_varchar(컬럼1, 컬럼2, 컬럼3)
VALUES('ABC', 'ABC', 'ABC');

INSERT INTO tb_varchar(컬럼1, 컬럼2, 컬럼3)
VALUES('가나다', '가나다', '가나다');

SELECT "컬럼1", "컬럼2", "컬럼3",
    LENGTHB("컬럼1"), LENGTHB("컬럼2"), LENGTHB("컬럼3")
FROM tb_varchar;

-- LONG 최대 2GB까지 저장 가능
CREATE TABLE TB_LONG(
    COL_LONG1 LONG
--    COL_LONG2 LONG

);

INSERT INTO tb_long(COL_LONG1)
VALUES('ABC');

-- 오라클에서 LONG은 2GB까지 저장이 가능한 문자열이다.

-- 숫자 자료형 INTEGER
CREATE  TABLE TB_INTEGER(
COL_INT1 INTEGER,
COL_INT2 INTEGER
);

-- NUMBER(정수, 실수 둘다 사용가능함)

CREATE TABLE TB_NUMBER(
COL_NUM1 NUMBER,
COL_NUM2 NUMBER(5),
COL_NUM3 NUMBER(5, 2),
COL_NUM4 NUMBER(*, 2)
);

INSERT INTO TB_NUMBER(COL_NUM1, COL_NUM2, COL_NUM3, COL_NUM4)
VALUES(1234.5678, 12345, 123.456, 1234.56789);

SELECT * FROM TB_NUMBER;

/*
INSERT INTO TB_NUMBER(COL_NUM1, COL_NUM2, COL_NUM3, COL_NUM4)
VALUES(1234.5678, 12345, 1234.567, 1234.56789);
*/
-- 오류 1234,567 5자리 숫자 안에 소수점 2자리까지이므로  숫자의 범위가 넘어가서 오류가 발생

-- 날짜 자료형 DATE
-- 연도, 월, 일, 시, 분, 초 까지 전부다 들어간다.
CREATE TABLE TB_DATE(
    COL_DATE1 DATE,
    COL_DATE2 DATE
);

INSERT INTO TB_DATE(COL_DATE1, COL_DATE2)
VALUES(SYSDATE, SYSDATE -1);

SELECT * FROM TB_DATE;

INSERT INTO TB_DATE(COL_DATE1, COL_DATE2)
VALUES(SYSDATE, TO_DATE('2019-07-12 10:32:21', 'YYYY-MM-DD HH:MI-SS'));

INSERT INTO TB_DATE(COL_DATE1, COL_DATE2)
VALUES('19/08/15', '19/07/12');

INSERT INTO TB_DATE(COL_DATE1, COL_DATE2)
VALUES(SYSDATE, '2019-07-12 10:32:21);

INSERT INTO TB_DATE(COL_DATE1, COL_DATE2)
VALUES(SYSDATE, TO_DATE('20190712103221', 'YYYYMMDDHHMISS'));

/* VARCHAR2 (문자열) -> DATE(날짜형식으로 바꿀 수 있음) : TO_DATE */
/* DATE(날짜형식) -> VARCHAR2(문자열) : TO_CHAR */

-- 기본 함수

-- DUAL : 가상테이블 -> 실행만 해볼 수 있는 테이블 ( 결과값 확인용 임시 테이블 )

SELECT 2 FROM DUAL;
SELECT 'a' FROM DUAL;
SELECT '굼' FROM DUAL;
SELECT 2*3*1*5*2+1 FROM DUAL;

-- 문자 함수
-- CHR(N) : ASCII 값을 문자로 변환
SELECT CHR(97) FROM DUAL;
SELECT CHR(65) FROM DUAL;

SELECT '내 점수는 ' || CHR(65) || ' 입니다' FROM DUAL; -- "내 점수는" + CHR(65) + "입니다."

-- LPAD (RPAD) : 나머지 빈칸을 특정문자 채운다
SELECT RPAD('BBB', 5, '=') FROM DUAL;

SELECT LPAD('BBB', 5, '=') FROM DUAL;

-- INSTR == indexof 시작이? 자바에서는 0부터 오라클 : 1~
-- 자바에서는 INDEX 번호가 0번지 부터 시작을 하지만 오라클은 1번지 부터 시작한다 ( 같은 회사가 맞는지 의문이다 )
SELECT INSTR('ABC123D4', '2')FROM DUAL;
SELECT INSTR('ABC123D4789B', 'B')FROM DUAL; -- 이러면 제일 가까운 2번째 B를 찾으므로 2가 출력된다.
SELECT INSTR('ABC123D4789B', 'B', 7)FROM DUAL; -- 이러면 7번지 이후에 있는 B를 찾아라 이기 때문에 12가 출력이 된다.

SELECT INSTR('ABC123D4789B', 'B', 7, 1)FROM DUAL; -- 이러면 7번지 이후에 있는 첫번째 B를 찾아라 출력 12
SELECT INSTR('ABC123D4789B', 'B', 7, 2)FROM DUAL; -- 이러면 7번지 이후에 있는 첫번째 B를 찾아라 출력 0  2번째 있는 B는 존재하지 않음으로 0이 출력된다.

-- REPLACE : 문자열 '치환'
SELECT REPLACE('AAAAAAADFGA', 'A') FROM DUAL; --  A 라는 문자를 고쳐라 지만 고칠 대상이 없으므로 A가 지워져서 DFG가 출력이 된다.

SELECT REPLACE('AAAAAAADFGA', 'A', 'B') FROM DUAL; -- A라는 문자를 B로 고쳐라 BBB...DFGB 가 출력이 된다.

SELECT REPLACE('AAAAAAADFGA', 'A', 'a') FROM DUAL; -- aaa...DFGa

SELECT REPLACE('AAAAAAADFGA', 'AA', 'a') FROM DUAL; -- aaaADFGA 출력 대상이 AA임으로 AA 2개당 a하나로 치환된다.

-- TRANSLATE : 문자치환
SELECT TRANSLATE('ASDASDASD', 'A', 'a') FROM DUAL; -- 여기는 바꾸고 싶은 문자를 적지 않으면 오류를 일으킨다.


-- 숫자 함수
-- 올림
SELECT CEIL(13.1) FROM DUAL;

-- 내림
SELECT FLOOR(14.9) FROM DUAL;

-- 나눈 나머지
SELECT MOD(9.1, 2.3) FROM DUAL; -- 오라클은 소수점을 사용해도 값이 나온다

-- 승수
SELECT POWER(3, 2) FROM DUAL;

-- 반올림
SELECT ROUND(13.4) FROM DUAL;

-- 부호   +:1  0:0   -:-1    플러스면 1 0이면 0 마이너스면 -1 이 출력된다.
SELECT SIGN(0) FROM DUAL;

-- 버림 소수점 아래 자른다.
SELECT TRUNC(12.3456) FROM DUAL;
SELECT TRUNC(12.3456, 2) FROM DUAL; -- 소수점 2자리수 까지 챙기고 나머지는 버려라

SELECT TRUNC(123.456, -1) FROM DUAL; -- 이러면 일의 자리수를 버려라 이기 때문에 120이 출력된다.

-- ASCII 코드값 출력된다 <-> CHR 과 반대이다.
SELECT ASCII('A') FROM DUAL;

-- 변환 함수 DATE -> STRING
-- TO_CHAR
SELECT TO_CHAR(SYSDATE) FROM DUAL;
-- 시간에서는 YYYY 연도 MM 월 DD 일 HH 시 MI 분 SS 초 이다.
SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD-HH-MI-SS') FROM DUAL; -- 현재날짜-시간-시간-시간

SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:MI:SS') FROM DUAL; -- 현재날짜 시간:시간:시간

SELECT TO_CHAR(100000000, '$999,999,999') FROM DUAL; -- $100,000,000 출력됨

-- 날짜든 숫자든 문자로 바꿔준다.

-- TO_DATE
SELECT TO_DATE('20190617') FROM DUAL; -- 숫자를 날짜 형식으로 바꾼다.

SELECT TO_DATE('20190617', 'YYYYMMDD') FROM DUAL;

SELECT TO_DATE('06172019', 'MMDDYYYY') FROM DUAL;

-- TO_NUMBER
SELECT '10' * 10 FROM DUAL; -- 100이 출력된다 약간 야매방식

SELECT TO_NUMBER('10') * 10 FROM DUAL; -- 100 출력 정식방법

-- LAST_DAY 
SELECT LAST_DAY(SYSDATE) FROM DUAL; -- 06/17일 이지만 라스트 데이를 붙으면 06/30출력이된다.

SELECT LAST_DAY('2011/12/11') FROM DUAL; -- 11/12/31 출력 (야매방식)


SELECT LAST_DAY( TO_DATE('2011-12-01', 'YYYY-MM-DD')) FROM DUAL; -- 11/12/31 출력 정식 방법

-- JAVA SUBSTRING(1, 3) "ABCDE" -> 1번지부터 3번지전 까지 가져와라 -> BC
-- SUBSTR
SELECT SUBSTR('ABCDE', 3) FROM DUAL; -- 3번지 부터 끝까지 가져와라 출력값 CDE

SELECT SUBSTR('ABCDE', 3, 1) FROM DUAL; -- 3번지 부터 한글자만 가져와라 출력값 C


-- LENGTHB -> 문자의 길이를 BYTE 형식으로
-- LENGTH -> 문자 길이
SELECT LENGTH('ABAA') FROM DUAL; -- 4 출력