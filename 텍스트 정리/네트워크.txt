TCP : Transmission Control Protocol
        전송	제어	통신규약
					
					
host : 종단 시스템
네트워크상의 더 연장되지 않는 기기
PC, SmartPhone, Printer, Scanner
			
Router	-	hardware
 host사이의 상호 데이터를 교환할 수 있도록(연결) 해주는 장비
				
Inter Network
포괄적인 신경망
			
Protocol - 통신규약
TCP	- Transmission Control Protocol
UDP	- User Datagram Protocol
		
7 Layer(계층) ISO
			
			
물리 계층		Physical Layer		물리계층
데이터 계층		data Link Layer		주소(IP)를 헤더에 첨부
네트워크 계층	Network Layer		IP 적용
전송 계층		Transport Layer		Port 지정
세션 계층		Session Layer		세션부분을 동기화
표현 계층		Presentation Layer	보안, 압축, 확장
응용 계층		Application Layer	프로그램
			
TCP
신사적인 프로토콜 (신뢰할 수 있는 통신규약)
전화 <--> 상대방과 연결이 되어야지 통신이 가능함
데이터를 전송했을경우 데이터의 경계가 없다 --> byte의 크기의 제한이 없다.
전송의 확인을 한다.
1:1 통신만 가능 UniCast
주로 채팅(String), Java Object (전송가능)
연결이 되어야 전송이 가능하며 전송을 다 못할경우 재전송한다

UDP
비연결형
편지, 지상파방송
데이터의 경계가 있다. --> (byte크기가 결정되어있다.)
1 대 1 -> unicast			
1 대 다 -> broadcast		
다 대 다 -> multicast
			
게임 채팅은 TCP, 그 외 다른작업은 UDP 사용
TCP == 반드시 전송되어야 한다.
UDP == 연결 전송확인 필요없이 보낸다.
			
Packet(묶음)
제어정보, 데이터등이 결합된 형태로 전송되는 실제데이터
IP, Port, String, Object 
		
IP = Internet Protocol == 주소
Ipv4 : 0 ~ 255 4
Ipv6 : 0 ~ 255 6
			
자기자신을 접속 주소 : 127.0.0.1
			
Port number
IP주소는 Internet에 존재하는 host(PC)를 식별할 수 있으나,
최종 주체인 프로세스(프로그램)를 식별하지 못하기 때문에
프로세스를 구별하기 위해 지정된 수치이다. (0 ~ 1024)System portNumber (사용불가능)
	
Socket : IP, PortNumber, TCP/UDP  	unix(file) -> 리눅스
통신을 하기 위한 기초단위
외부에서 접속을 했을 때, 이것을 통해서 들어온다. (현관문)
통신을 하기위한 Object
			
winsocket Send(보내다), recv(받다)
unix 	  write(보내다), read(받다)
	
Server <--->  Client(접속자)
1. socket ver 확인
2. Binding -> IP, Port설정
3. listen
4. Accept <------ connect 
접속이 성공하게되면 
5. 데이터 송수신
1) 서버에서는 리시브로 먼저 받고(read)	클라이언트에선 무조건 send(write) 
2) 받은걸 그대로 돌려준다 send 	그리고 다시 recv로 받는다
				
1) recv(read) < --- send
	packet
2) send(write) --- > recv
	packet
						
DNS(Domain Name System) Server
IP <<-->> 고유의 이름으로 바꿔준다.
www.naver.com
			
서버는 항상 동작을 하고있고 클라이언트가 서버에 접속을 하는 것 이다.			
서버는 동작을하면서 항상 동작을 한 상태를 유지를한다. 동작을 해야지만 클라이언트가 접근할 수 있다.